package com.github.tymefly.eeprom.builder.io.target.report;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;

import javax.annotation.Nonnull;

import com.github.tymefly.eeprom.builder.exception.IoException;

/**
 * Common reporting frame work
 */
abstract class ReportFile implements Report {
    private final File targetDirectory;
    private final String fileName;


    ReportFile(@Nonnull File targetDirectory, @Nonnull String fileName) {
        this.targetDirectory = targetDirectory;
        this.fileName = fileName;
    }

    /**
     * Generate the report specific details.
     * Each line is generated by calling {@link #report(Writer, String, Object...)}
     * @param writer    to be passed to {@link #report(Writer, String, Object...)}
     */
    abstract void report(@Nonnull Writer writer);


    /**
     * Write a single line to the report
     * @param writer        Writer used to publish the line of text
     * @param message       The format of the line of text
     * @param args          Details of the text
     * @throws IoException  if the report could not be written
     */
    void report(@Nonnull Writer writer, @Nonnull String message, Object... args) throws IoException{
        try {
            String line = String.format(message, args);

            writer.write(line);
            writer.write(System.lineSeparator());
        } catch (IOException e) {
            throw new IoException("Failed to write report " + fileName, e);
        }
    }


    public final void close() throws IoException {
        File destination = new File(targetDirectory, fileName);
        LocalDateTime timeStamp = LocalDateTime.now();

        try (
            Writer writer = new BufferedWriter(new FileWriter(destination, StandardCharsets.UTF_8))
        ) {
            report(writer);
            report(writer, "");
            report(writer, "");
            report(writer, "Generated at %tF %tR", timeStamp, timeStamp);
        } catch (IOException e) {
            throw new IoException("Failed to write report " + destination.getAbsolutePath(), e);
        }
    }
}
